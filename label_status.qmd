---
title: "Hyena cc23 labeling status"
format:
  gfm:
    output-file: 'README'
date: now
date-format: "[Last updated on] MMMM DD, YYYY"
editor: visual
df-print: kable
---

```{r assemble data}
#| echo: false
#| message: false
#| output: false

library(dplyr)

############## Read in labels
label_path <- '~/Documents/code/hyena_call_labels/finished_and_checked/'
files <- c(list.files(path = label_path, pattern = '*.txt'))

# Remove files in /issues and /commented/archive/ to avoid duplicates or bad data
#files <- files[!grepl('archive|issues', files)]

labels_list <- list()
dups <- c()
for(f in files){
  f_metadata <- strsplit(gsub('.*/', '', f), c('_'))[[1]]
  aud_name <- gsub(f_metadata[5], pattern = '.txt', replacement = '')
  ## Skip and announce if there is a duplicate
  if(aud_name %in% names(labels_list)){
    dups <- c(dups, aud_name)
    if(f == files[length(files)])
      cat('Duplicates found: ', dups)
    next
  }
  
  labs <- read.table(paste0(label_path,f), sep = '\t')
  labs$id <- f_metadata[2]
  labs$aud_name <- aud_name
  labels_list[[aud_name]] <- labs
  if(f == files[length(files)] & length(dups))   
    cat('Duplicates found: ', dups)
}
labels <- do.call(rbind, labels_list)
names(labels) <- c('time_secs', 'duration', 'label', 'id', 'aud_name')


calls_of_interest <- c('whp', 'grn', 'gig', 'rum', 'sql', 'gwl', 'fed', 'str', 'oth', 'fus', 'seq', 'unk', 'syn')

labeled_calls <- data.frame()
for(call in calls_of_interest){
  call_info <- filter(labels, grepl(label, pattern = call, ignore.case = T))
  total_count <- nrow(call_info)
  total_duration <- sum(call_info$duration)
  foc <- sum(grepl(call_info$label, pattern = 'foc'))
  non <- sum(grepl(call_info$label, pattern = 'non'))
  unf <- sum(grepl(call_info$label, pattern = 'unf'))
  total_inds <- length(unique(call_info$id))
  total_audits <- length(unique(call_info$aud_name))
  labeled_calls <- rbind(labeled_calls, data.frame(call, total_count, foc, non, unf, 
                                  total_duration, total_inds,
                                  total_audits))
}

problems <- data.frame()
audit_summary <- data.frame()
for(aud in unique(labels$aud_name)){
  audit <- filter(labels, aud_name == aud)
  audit$label <- tolower(audit$label)
  start_end <- filter(audit, label %in% c('soa', 'eoa'))
  ## is first label soa
  if(audit[1,'label'] != 'soa' | audit[nrow(audit),'label'] != 'eoa'){
    issue <- 'audit not bounded by soa/eoa'
    problems <- rbind(problems, data.frame(audit = aud, issue))
  } else if(nrow(start_end) > 2){
    issue <- 'too many soa and eoa'
    problems <- rbind(problems, data.frame(audit = aud, issue))
  } else if(sum(c('soa', 'eoa') %in% tolower(start_end$label)) < 2){
    issue <- 'soa or eoa duplicated'
    problems <- rbind(problems, data.frame(audit = aud, issue))
  }else{ ## Everything good, calculate duration
    duration <- start_end[tolower(start_end$label) == 'eoa','time_secs'] - 
      start_end[tolower(start_end$label) == 'soa','time_secs']
    duration <- duration - sum(filter(audit, grepl(label, pattern = 'skip'))$duration)
    
    audit_summary <- rbind(audit_summary,
                           data.frame(audit = aud, duration, id = audit$id[1]))
  } 
}

audits_by_id <- audit_summary %>%
  group_by(id) %>%
  summarize(audit_hrs = sum(duration)/(60*60))

labels %>% 
  filter(grepl('fed', label)) %>% 
  group_by(id) %>% 
  summarize(total_feeding = sum(duration)/60)
```

### Current state

There are `r round(sum(filter(labels, duration <= 100)$duration)/(60*60), 2)` hours of calls in `r round(sum(audits_by_id$audit_hrs),2)` hours of total audit time.

### Labels by date and id

```{r by date and individual}
#| echo: false
#| layout-ncol: 2
library(ggplot2)

ggplot(data = labels, aes(x = as.POSIXct('2023-01-01', tz = 'UTC') + time_secs, y = id))+
  geom_point(shape = '|', alpha = 0.8) + 
  geom_text(data = audits_by_id, aes(x = as.POSIXct('2022-12-31', 'UTC'), label = round(audit_hrs, 2)), fontface = 'bold')+
  geom_vline(aes(xintercept = as.POSIXct('2023-01-01', 'UTC')), lty = 3)+
  annotate('text', label = '\naudit hrs', x = as.POSIXct('2022-12-30', 'UTC'), 
           y = length(unique(labels$id))+ 1, hjust = 0.37, fontface = 'bold.italic')+
  theme_classic()+
  xlim(as.POSIXct('2022-12-30', 'UTC'), as.POSIXct('2023-01-23', 'UTC'))+
  xlab('Date')+
  ylab('ID')+
  scale_y_discrete(limits = rev)
```

(points represent onset times of labeled calls)

### By call type

```{r, by call type}
#| echo: false
labeled_calls
```

### Start and end of audit issues

These audits have issues with start and end of audit:

```{r, problems}
#| echo: false
problems
```
